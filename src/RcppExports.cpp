// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "../inst/include/cdtau.h"
#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

// loglik_rbm
double loglik_rbm(MapMat w, MapVec b, MapVec c, MapMat v);
RcppExport SEXP _cdtau_loglik_rbm(SEXP wSEXP, SEXP bSEXP, SEXP cSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< MapMat >::type w(wSEXP);
    Rcpp::traits::input_parameter< MapVec >::type b(bSEXP);
    Rcpp::traits::input_parameter< MapVec >::type c(cSEXP);
    Rcpp::traits::input_parameter< MapMat >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(loglik_rbm(w, b, c, v));
    return rcpp_result_gen;
END_RCPP
}
// rbm_sample_k
List rbm_sample_k(MapMat w, MapVec b, MapVec c, VectorXd v0, int k);
RcppExport SEXP _cdtau_rbm_sample_k(SEXP wSEXP, SEXP bSEXP, SEXP cSEXP, SEXP v0SEXP, SEXP kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< MapMat >::type w(wSEXP);
    Rcpp::traits::input_parameter< MapVec >::type b(bSEXP);
    Rcpp::traits::input_parameter< MapVec >::type c(cSEXP);
    Rcpp::traits::input_parameter< VectorXd >::type v0(v0SEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    rcpp_result_gen = Rcpp::wrap(rbm_sample_k(w, b, c, v0, k));
    return rcpp_result_gen;
END_RCPP
}
// rbm_sample_tau
List rbm_sample_tau(MapMat w, MapVec b, MapVec c, VectorXd v0, int min_steps, int max_steps, bool verbose);
RcppExport SEXP _cdtau_rbm_sample_tau(SEXP wSEXP, SEXP bSEXP, SEXP cSEXP, SEXP v0SEXP, SEXP min_stepsSEXP, SEXP max_stepsSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< MapMat >::type w(wSEXP);
    Rcpp::traits::input_parameter< MapVec >::type b(bSEXP);
    Rcpp::traits::input_parameter< MapVec >::type c(cSEXP);
    Rcpp::traits::input_parameter< VectorXd >::type v0(v0SEXP);
    Rcpp::traits::input_parameter< int >::type min_steps(min_stepsSEXP);
    Rcpp::traits::input_parameter< int >::type max_steps(max_stepsSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(rbm_sample_tau(w, b, c, v0, min_steps, max_steps, verbose));
    return rcpp_result_gen;
END_RCPP
}
// rbm_cdk
List rbm_cdk(int vis_dim, int hid_dim, MapMat dat, int batch_size, double lr, int niter, int ngibbs, bool eval_loglik, bool exact_loglik, int verbose);
RcppExport SEXP _cdtau_rbm_cdk(SEXP vis_dimSEXP, SEXP hid_dimSEXP, SEXP datSEXP, SEXP batch_sizeSEXP, SEXP lrSEXP, SEXP niterSEXP, SEXP ngibbsSEXP, SEXP eval_loglikSEXP, SEXP exact_loglikSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type vis_dim(vis_dimSEXP);
    Rcpp::traits::input_parameter< int >::type hid_dim(hid_dimSEXP);
    Rcpp::traits::input_parameter< MapMat >::type dat(datSEXP);
    Rcpp::traits::input_parameter< int >::type batch_size(batch_sizeSEXP);
    Rcpp::traits::input_parameter< double >::type lr(lrSEXP);
    Rcpp::traits::input_parameter< int >::type niter(niterSEXP);
    Rcpp::traits::input_parameter< int >::type ngibbs(ngibbsSEXP);
    Rcpp::traits::input_parameter< bool >::type eval_loglik(eval_loglikSEXP);
    Rcpp::traits::input_parameter< bool >::type exact_loglik(exact_loglikSEXP);
    Rcpp::traits::input_parameter< int >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(rbm_cdk(vis_dim, hid_dim, dat, batch_size, lr, niter, ngibbs, eval_loglik, exact_loglik, verbose));
    return rcpp_result_gen;
END_RCPP
}
// rbm_fit
List rbm_fit(int vis_dim, int hid_dim, MapMat dat, int batch_size, double lr, int niter, int min_mcmc, int max_mcmc, bool eval_loglik, bool exact_loglik, int verbose);
RcppExport SEXP _cdtau_rbm_fit(SEXP vis_dimSEXP, SEXP hid_dimSEXP, SEXP datSEXP, SEXP batch_sizeSEXP, SEXP lrSEXP, SEXP niterSEXP, SEXP min_mcmcSEXP, SEXP max_mcmcSEXP, SEXP eval_loglikSEXP, SEXP exact_loglikSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type vis_dim(vis_dimSEXP);
    Rcpp::traits::input_parameter< int >::type hid_dim(hid_dimSEXP);
    Rcpp::traits::input_parameter< MapMat >::type dat(datSEXP);
    Rcpp::traits::input_parameter< int >::type batch_size(batch_sizeSEXP);
    Rcpp::traits::input_parameter< double >::type lr(lrSEXP);
    Rcpp::traits::input_parameter< int >::type niter(niterSEXP);
    Rcpp::traits::input_parameter< int >::type min_mcmc(min_mcmcSEXP);
    Rcpp::traits::input_parameter< int >::type max_mcmc(max_mcmcSEXP);
    Rcpp::traits::input_parameter< bool >::type eval_loglik(eval_loglikSEXP);
    Rcpp::traits::input_parameter< bool >::type exact_loglik(exact_loglikSEXP);
    Rcpp::traits::input_parameter< int >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(rbm_fit(vis_dim, hid_dim, dat, batch_size, lr, niter, min_mcmc, max_mcmc, eval_loglik, exact_loglik, verbose));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_cdtau_loglik_rbm", (DL_FUNC) &_cdtau_loglik_rbm, 4},
    {"_cdtau_rbm_sample_k", (DL_FUNC) &_cdtau_rbm_sample_k, 5},
    {"_cdtau_rbm_sample_tau", (DL_FUNC) &_cdtau_rbm_sample_tau, 7},
    {"_cdtau_rbm_cdk", (DL_FUNC) &_cdtau_rbm_cdk, 10},
    {"_cdtau_rbm_fit", (DL_FUNC) &_cdtau_rbm_fit, 11},
    {NULL, NULL, 0}
};

RcppExport void R_init_cdtau(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
